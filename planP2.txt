//How do we handle the starfield? 


Classes:

Planet
	Input: Height-map, Radius, heightScale, textureImage, spinRate, orbitSize, orbitSpeed
	
	Members
		HeightMap
		Radius
		heightScale
		textureImage
		spinRate
		orbitSize
		orbitSpeed
		currentPosition //World coordinates
	
	Methods: 
		buildGeometry
			This function builds a mesh with the same dimensions as the height map, wraps the mesh around a sphere with radius = Radius. Then, the vertices are moved relative to the sphere's center based upon the height map multiplied by the heightScale.
			
		applyTexture
			Applies a texture to the mesh prior to the build step. 
			
		Draw
			Draws the planet
		
		spin
			Rotates the planet about its own center of mass at the speed defined by spinRate
		
		orbit
			Translates the sphere about an orbital path with radius = orbitSize at the rate defined by orbitSpeed. The orbitSize is the distance from the world origin (aka center of mass of the sun). 
		
		Camera
			Sets a view at a given distance (based on Radius) from the planet. This view is used to watch the planet spin. 
			
		getCoordinates()
			Returns the world coordinates of the center of mass for this planet
			

Rocketship

	Members
		vec3 currentPosition //world coordinates
		currentForward //The current direction that the rocket is facing. 
		bool headLampOn;
		bool freeFlyOn; //Is free fly currently activated?

	Methods
		Draw 
			Draws the rocketship
			
		applyTexture (optional)
			applies a texture to the rocketship's mesh. 
			
		buildGeomtry
			Builds the rocketship's geometry
			
		headLampSwitch
			Turns the rocketships cone-shaped headlamp on and off. 
			
		camera(int location)
			0 = Nose
				Sets a view directly in front of the nose of the rocketship
			1 = Chase
				Sets a view a short distance behind the rocketship. 
				
		freeSteer
			Allows the ship to rotate up, down, left, and right (no rotation about Z). 
			
		freeFly
			Translates the ship "forward" in the direction of the ship's current "Z-Axis"
			
		orbit(planet)
			Takes a planet as input, and sets an orbit in relation to the planet's center of mass, its radius, and its heightScale. When orbit is on, freesteer is allowed, but the orbit itself will NOT change. The freesteer rotation matrix must be applied after the ship has been placed at the proper world coordinates. 

Application
	Members:
		Stores the "global" variables
		
	Methods:
		pause
			Handles the pause calculations



